demo <- as.data.frame(MplsDemo)
stops <- as.data.frame(MplsStops)
stops <- stops %>% pivot_wider(names_from=problem, values_from=preRace)
stops <- stops %>% pivot_longer(cols=c('suspicious', 'traffic'), names_to='problem', values_to='preRace')
fulldata <- right_join(demo, stops) %>% na.omit(col=personSearch)
diff_neighborhoods <- anti_join(demo, stops)
#The reason I decided to do a right join on the two data frames is because this would provide information about each person and the neighborhood they live in to determine if certain precincts have more arrests in one neighborhood over another and if there is a disproporionate of arrests based on race.
#No cases in the MplsStops nor the MplsDemo datasets were dorpped
fulldata <- fulldata %>% mutate(white_pop=white*population, black_pop=black*population, foreign_pop=foreignBorn*population, in_poverty=poverty*population, college_educated=collegeGrad*population)
fulldata <- fulldata %>% group_by(neighborhood, race) %>% mutate(race_number_of_stops=n())
fulldata <- fulldata %>% group_by(neighborhood, gender) %>% mutate(gender_number_of_stops=n())
#Shows number of arrests by race
race_stops <- fulldata %>% group_by(race) %>% summarize(sum_stops=sum(race_number_of_stops)) %>% arrange(sum_stops)
glimpse(race_stops)
#Shows number of arrests by gender
gender_stops <- fulldata %>% group_by(gender) %>% summarize(sum_stops=sum(gender_number_of_stops))
glimpse(gender_stops)
#Number of stops by neighborhood
fulldata %>% select(race, neighborhood, race_number_of_stops) %>% group_by(neighborhood) %>% summarize(sum_stops=sum(race_number_of_stops)) %>% arrange(desc(sum_stops))
fulldata %>% select(neighborhood, white, black, foreignBorn) %>% subset(select=-gender) %>% unique() %>% arrange(desc(black))
#Ratio of blacks to whites in each neighborhood
fulldata %>% mutate(bw=black_pop/white_pop) %>% select(neighborhood, bw) %>% subset(select=-gender) %>% unique() %>% arrange(desc(bw))
#Ratio of non-white neighborhoods
non_white_neigh <- fulldata %>% mutate(ratio=(black_pop+foreign_pop)/white_pop) %>% select(neighborhood, ratio) %>% subset(select=-gender) %>% unique() %>% arrange(desc(ratio))
glimpse(non_white_neigh)
#Number of citations by race
race_cites <- fulldata %>% select(race, citationIssued) %>% filter(citationIssued=='YES') %>% group_by(race) %>% summarise(sum_cites=n())
glimpse(race_cites)
#Gives ratio of citations per stop by each race
race_cites_per_stop <- full_join(race_stops, race_cites) %>% mutate(perc_of_cites=100*(sum_cites/sum_stops))
glimpse(race_cites_per_stop)
#Gives ratio of citations per stop by gender
gender_cites <- fulldata %>% select(gender, citationIssued) %>% filter(citationIssued=='YES') %>% group_by(gender) %>% summarise(sum_cites=n())
full_join(gender_stops, gender_cites) %>% mutate(perc_of_cites=100*(sum_cites/sum_stops))
#College educated in each neighborhood - 7 out of the top 10 non-white neighborhoods are the least college educated in Minneapolis
college_edu <- fulldata %>% select(neighborhood, collegeGrad) %>% subset(select=-gender) %>% unique() %>% arrange(collegeGrad)
glimpse(college_edu)
#Summary stats for each race
race_stops_summary <- fulldata %>% group_by(race) %>% summarize(mean_stops=mean(race_number_of_stops), sd_stops=sd(race_number_of_stops), var_stops=var(race_number_of_stops)) %>% arrange(mean_stops)
glimpse(race_stops_summary)
quantile(fulldata$race_number_of_stops)
min(fulldata$race_number_of_stops)
max(fulldata$race_number_of_stops)
#Summary statistice for each gender
gender_stops_summary <- fulldata %>% group_by(gender) %>% summarize(mean_stops=mean(gender_number_of_stops), sd_stops=sd(gender_number_of_stops), var_stops=var(gender_number_of_stops)) %>% arrange(mean_stops)
glimpse(gender_stops_summary)
quantile(fulldata$gender_number_of_stops)
min(fulldata$gender_number_of_stops)
max(fulldata$gender_number_of_stops)
#Number of stops per precinct
pol_prec_demo <- fulldata %>% select(policePrecinct, white, black, foreignBorn) %>% subset(select=-c(neighborhood, gender)) %>% unique() %>% mutate(perc_foreign=100*foreignBorn)
nstops_precinct <- fulldata %>% group_by(policePrecinct) %>% summarize(sum_stops=n())
avg_foreign_born <- pol_prec_demo %>% group_by(policePrecinct) %>% summarize(mean_foreign=mean(foreignBorn))
full_join(avg_foreign_born, nstops_precinct) %>% arrange(mean_foreign)
#Create graphs
#College educated by race
white_college <- fulldata %>% ggplot(aes(x=white, y=collegeGrad)) + geom_line(stat='identity') + ylab('College Educated') + xlab('Percent White in Neighborhood')
black_college <- fulldata %>% ggplot(aes(x=black, y=collegeGrad)) + geom_line(stat='identity') + ylab('College Educated') + xlab('Percent Black in Neighborhood')
foreign_college <- fulldata %>% ggplot(aes(x=foreignBorn, y=collegeGrad)) + geom_line(stat='identity') + ylab('College Educated') + xlab('Percent Foreign Born in Neighborhood')
grid.arrange(white_college, black_college, foreign_college)
#Number of stops by race
nstops_bar <- race_stops %>% ggplot(aes(x=race, y=sum_stops, fill=race)) + geom_bar(stat='identity') + xlab('Race') + ylab('Number of Stops')
ncites_bar <- race_cites_per_stop %>% ggplot(aes(x=race, y=perc_of_cites, fill=race)) + geom_bar(stat='identity') + xlab('Race') + ylab('Percent Chance of a Citation per Stop')
grid.arrange(nstops_bar, ncites_bar)
library(carData)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(gridExtra)
demo <- as.data.frame(MplsDemo)
stops <- as.data.frame(MplsStops)
stops <- stops %>% pivot_wider(names_from=problem, values_from=preRace)
stops <- stops %>% pivot_longer(cols=c('suspicious', 'traffic'), names_to='problem', values_to='preRace')
fulldata <- right_join(demo, stops) %>% na.omit(col=personSearch)
diff_neighborhoods <- anti_join(demo, stops)
#The reason I decided to do a right join on the two data frames is because this would provide information about each person and the neighborhood they live in to determine if certain precincts have more arrests in one neighborhood over another and if there is a disproporionate of arrests based on race.
#No cases in the MplsStops nor the MplsDemo datasets were dorpped
fulldata <- fulldata %>% mutate(white_pop=white*population, black_pop=black*population, foreign_pop=foreignBorn*population, in_poverty=poverty*population, college_educated=collegeGrad*population)
fulldata <- fulldata %>% group_by(neighborhood, race) %>% mutate(race_number_of_stops=n())
fulldata <- fulldata %>% group_by(neighborhood, gender) %>% mutate(gender_number_of_stops=n())
#Shows number of arrests by race
race_stops <- fulldata %>% group_by(race) %>% summarize(sum_stops=sum(race_number_of_stops)) %>% arrange(sum_stops)
glimpse(race_stops)
#Shows number of arrests by gender
gender_stops <- fulldata %>% group_by(gender) %>% summarize(sum_stops=sum(gender_number_of_stops))
glimpse(gender_stops)
#Number of stops by neighborhood
fulldata %>% select(race, neighborhood, race_number_of_stops) %>% group_by(neighborhood) %>% summarize(sum_stops=sum(race_number_of_stops)) %>% arrange(desc(sum_stops))
fulldata %>% select(neighborhood, white, black, foreignBorn) %>% subset(select=-gender) %>% unique() %>% arrange(desc(black))
#Ratio of blacks to whites in each neighborhood
fulldata %>% mutate(bw=black_pop/white_pop) %>% select(neighborhood, bw) %>% subset(select=-gender) %>% unique() %>% arrange(desc(bw))
#Ratio of non-white neighborhoods
non_white_neigh <- fulldata %>% mutate(ratio=(black_pop+foreign_pop)/white_pop) %>% select(neighborhood, ratio) %>% subset(select=-gender) %>% unique() %>% arrange(desc(ratio))
glimpse(non_white_neigh)
#Number of citations by race
race_cites <- fulldata %>% select(race, citationIssued) %>% filter(citationIssued=='YES') %>% group_by(race) %>% summarise(sum_cites=n())
glimpse(race_cites)
#Gives ratio of citations per stop by each race
race_cites_per_stop <- full_join(race_stops, race_cites) %>% mutate(perc_of_cites=100*(sum_cites/sum_stops))
glimpse(race_cites_per_stop)
#Gives ratio of citations per stop by gender
gender_cites <- fulldata %>% select(gender, citationIssued) %>% filter(citationIssued=='YES') %>% group_by(gender) %>% summarise(sum_cites=n())
full_join(gender_stops, gender_cites) %>% mutate(perc_of_cites=100*(sum_cites/sum_stops))
#College educated in each neighborhood - 7 out of the top 10 non-white neighborhoods are the least college educated in Minneapolis
college_edu <- fulldata %>% select(neighborhood, collegeGrad) %>% subset(select=-gender) %>% unique() %>% arrange(collegeGrad)
glimpse(college_edu)
#Summary stats for each race
race_stops_summary <- fulldata %>% group_by(race) %>% summarize(mean_stops=mean(race_number_of_stops), sd_stops=sd(race_number_of_stops), var_stops=var(race_number_of_stops)) %>% arrange(mean_stops)
glimpse(race_stops_summary)
quantile(fulldata$race_number_of_stops)
min(fulldata$race_number_of_stops)
max(fulldata$race_number_of_stops)
#Summary statistice for each gender
gender_stops_summary <- fulldata %>% group_by(gender) %>% summarize(mean_stops=mean(gender_number_of_stops), sd_stops=sd(gender_number_of_stops), var_stops=var(gender_number_of_stops)) %>% arrange(mean_stops)
glimpse(gender_stops_summary)
quantile(fulldata$gender_number_of_stops)
min(fulldata$gender_number_of_stops)
max(fulldata$gender_number_of_stops)
#Number of stops per precinct
pol_prec_demo <- fulldata %>% select(policePrecinct, white, black, foreignBorn) %>% subset(select=-c(neighborhood, gender)) %>% unique() %>% mutate(perc_foreign=100*foreignBorn)
nstops_precinct <- fulldata %>% group_by(policePrecinct) %>% summarize(sum_stops=n())
avg_foreign_born <- pol_prec_demo %>% group_by(policePrecinct) %>% summarize(mean_foreign=mean(foreignBorn))
full_join(avg_foreign_born, nstops_precinct) %>% arrange(mean_foreign)
#Create graphs
#College educated by race
white_college <- fulldata %>% ggplot(aes(x=white, y=collegeGrad)) + geom_line(stat='identity') + ylab('College Educated') + xlab('Percent White in Neighborhood')
black_college <- fulldata %>% ggplot(aes(x=black, y=collegeGrad)) + geom_line(stat='identity') + ylab('College Educated') + xlab('Percent Black in Neighborhood')
foreign_college <- fulldata %>% ggplot(aes(x=foreignBorn, y=collegeGrad)) + geom_line(stat='identity') + ylab('College Educated') + xlab('Percent Foreign Born in Neighborhood')
grid.arrange(white_college, black_college, foreign_college)
#Number of stops by race
nstops_bar <- race_stops %>% ggplot(aes(x=race, y=sum_stops, fill=race)) + geom_bar(stat='identity') + xlab('Race') + ylab('Number of Stops')
ncites_bar <- race_cites_per_stop %>% ggplot(aes(x=race, y=perc_of_cites, fill=race)) + geom_bar(stat='identity') + xlab('Race') + ylab('Percent Chance of a Citation per Stop')
grid.arrange(nstops_bar, ncites_bar)
#Relationship between foreign born and number of stops per precinct
foreign_stops_bar <- pol_prec_demo %>% ggplot(aes(x=policePrecinct, y=perc_foreign, fill=policePrecinct)) + geom_bar(stat='summary', fun.y='mean') + xlab('Police Precinct') + ylab('Average Percent of Foreigners per Precinct')
precinct_nstops <- nstops_precinct %>% ggplot(aes(x=policePrecinct, y=sum_stops, fill=policePrecinct)) + geom_bar(stat='identity') + xlab('Police Precinct') + ylab('Total Number of Stops per Precinct')
grid.arrange(foreign_stops_bar, precinct_nstops)
#PCA
full <- fulldata %>% select(white, black, foreignBorn, hhIncome, race_number_of_stops, collegeGrad, gender_number_of_stops) %>% subset(select=-c(neighborhood, gender)) %>% unique()
cor_mat <- full %>% cor()
cor_mat
full_pca <- fulldata %>% select(white, black, foreignBorn, hhIncome, race_number_of_stops, collegeGrad, gender_number_of_stops) %>% subset(select=-c(neighborhood, gender)) %>% unique() %>% scale() %>% prcomp()
full_pca$rotation
full_pca %>% summary()
cor_mat %>% eigen()
full_pca$rotation[,1:2]%>%as.data.frame%>%rownames_to_column%>%
ggplot()+geom_hline(aes(yintercept=0),lty=2)+
geom_vline(aes(xintercept=0),lty=2)+ylab("PC2")+xlab("PC1")+
geom_segment(aes(x=0,y=0,xend=PC1,yend=PC2),arrow=arrow(),col="red")+
geom_label(aes(x=PC1*1.1,y=PC2*1.1,label=rowname))
full_pca <- fulldata %>% select(white, black, foreignBorn, hhIncome, race_number_of_stops, collegeGrad, gender_number_of_stops) %>% subset(select=-c(neighborhood, gender)) %>% unique() %>% scale() %>% prcomp()
full_pca %>% summary()
install.packages("scatterplot3d")
